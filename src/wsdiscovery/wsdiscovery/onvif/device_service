#!/bin/sh
POST_STRING=$(cat)
printf "Content-type: application/soap+xml\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><env:Envelope xmlns:env=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:tt=\"http://www.onvif.org/ver10/schema\" xmlns:tds=\"http://www.onvif.org/ver10/device/wsdl\" xmlns:ter=\"http://www.onvif.org/ver10/error\" xmlns:xs=\"http://www.w3.org/2000/10/XMLSchema\"><env:Body>"

case $POST_STRING in
  *GetSystemDateAndTime*)
    printf "<tds:GetSystemDateAndTimeResponse>
                <tds:SystemDateAndTime>
                    <tt:DateTimeType>NTP</tt:DateTimeType>
                        <tt:DaylightSavings>true</tt:DaylightSavings>
                        <tt:TimeZone>
                        <tt:TZ>%s</tt:TZ>
                        </tt:TimeZone>
                    <tt:UTCDateTime>
                        <tt:Time>
                            <tt:Hour>%i</tt:Hour>
                                <tt:Minute>%i</tt:Minute>
                                <tt:Second>%i</tt:Second>
                        </tt:Time>
                        <tt:Date>
                            <tt:Year>%i</tt:Year>
                                <tt:Month>%i</tt:Month>
                                <tt:Day>%i</tt:Day>
                        </tt:Date>
                    </tt:UTCDateTime>
                </tds:SystemDateAndTime>
            </tds:GetSystemDateAndTimeResponse>" "(UTC)" $(date +"%H") $(date +"%M") $(date +"%S") $(date +"%Y") $(date +"%m") $(date +"%d")
  ;;

  *GetDeviceInformation*)
    printf "<tds:GetDeviceInformationResponse>
                <tds:Manufacturer>%s</tds:Manufacturer>
                <tds:Model>%s</tds:Model>
                <tds:FirmwareVersion>%s</tds:FirmwareVersion>
                <tds:SerialNumber>%s</tds:SerialNumber>
                <tds:HardwareId>%s</tds:HardwareId>
            </tds:GetDeviceInformationResponse>" "YI Technology" $(cat /home/app/.camver) $(cat /home/app/.appver) $(ifconfig | awk '/HWaddr/{print substr($5,1)}') $(grep -e Hardware /proc/cpuinfo | awk '{print $3}') 
  ;;
  
  *GetScopes*)
    printf "<tds:GetScopesResponse>
                <tds:Scopes>
                    <tt:ScopeDef>Fixed</tt:ScopeDef>
                    <tt:ScopeItem>onvif://www.onvif.org/type/video_encoder</tt:ScopeItem>
                </tds:Scopes>
                <tds:Scopes>
                    <tt:ScopeDef>Fixed</tt:ScopeDef>
                    <tt:ScopeItem>onvif://www.onvif.org/type/Network_Video_Transmitter</tt:ScopeItem>
                </tds:Scopes>
                <tds:Scopes>
                    <tt:ScopeDef>Configurable</tt:ScopeDef>
                    <tt:ScopeItem>onvif://www.onvif.org/name/%s</tt:ScopeItem>
                </tds:Scopes>
                <tds:Scopes>
                    <tt:ScopeDef>Fixed</tt:ScopeDef>
                    <tt:ScopeItem>onvif://www.onvif.org/type/video_analytics</tt:ScopeItem>
                </tds:Scopes>
                 <tds:Scopes>
                    <tt:ScopeDef>Fixed</tt:ScopeDef>
                    <tt:ScopeItem>onvif://www.onvif.org/hardware/%s</tt:ScopeItem>
                </tds:Scopes>
                <tds:Scopes>
                    <tt:ScopeDef>Configurable</tt:ScopeDef>
                    <tt:ScopeItem>onvif://www.onvif.org/location/</tt:ScopeItem>
                </tds:Scopes>
                <tds:Scopes>
                    <tt:ScopeDef>Fixed</tt:ScopeDef>
                    <tt:ScopeItem>onvif://www.onvif.org/type/ptz</tt:ScopeItem>
                </tds:Scopes>
            </tds:GetScopesResponse>" $(cat /home/app/.camver) $(grep -e Hardware /proc/cpuinfo | awk '{print $3}')
  ;;

  *GetNetworkInterfaces*)
    printf "<tds:GetNetworkInterfacesResponse>
                <tds:NetworkInterfaces token=\"wlan0\">
                    <tt:Enabled>true</tt:Enabled>
                    <tt:Info>
                        <tt:Name>wlan0</tt:Name>
                        <tt:HwAddress>%s</tt:HwAddress>
                        <tt:MTU>1500</tt:MTU>
                    </tt:Info>
                    <tt:IPv4>
                        <tt:Enabled>true</tt:Enabled>
                        <tt:Config>
                            <tt:Manual>
                                <tt:Address>%s</tt:Address>
                                <tt:PrefixLength>24</tt:PrefixLength>
                            </tt:Manual>
                            <tt:DHCP>true</tt:DHCP>
                        </tt:Config>
                    </tt:IPv4>
                </tds:NetworkInterfaces>
            </tds:GetNetworkInterfacesResponse>" $(ifconfig | awk '/HWaddr/{print substr($5,1)}') $(ifconfig | awk '/inet addr/{print substr($2,6)}')
  ;;

  *GetDNS*)
    printf "<tds:GetDNSResponse>
                <tds:DNSInformation>
                    <tt:FromDHCP>true</tt:FromDHCP>
                    <tt:DNSFromDHCP>
                        <tt:Type>IPv4</tt:Type>
                        <tt:IPv4Address>%s</tt:IPv4Address>
                    </tt:DNSFromDHCP>
                </tds:DNSInformation>
            </tds:GetDNSResponse>" $(cat /etc/resolv.conf | awk '{print substr($2,1)}')
  ;;
  
  *GetNTP*)
    printf "<tds:GetNTPResponse>
                <tds:NTPInformation>
                    <tt:FromDHCP>true</tt:FromDHCP>
                </tds:NTPInformation>
            </tds:GetNTPResponse>"
  ;;

  *GetCapabilities*)
    IPADDR=$(ifconfig | awk '/inet addr/{print substr($2,6)}')
    printf "<tds:GetCapabilitiesResponse>
                <tds:Capabilities>
                    <tt:Device>
                        <tt:XAddr>http://%s/onvif/device_service</tt:XAddr>
                        <tt:Network>
                            <tt:IPFilter>false</tt:IPFilter>
                            <tt:ZeroConfiguration>false</tt:ZeroConfiguration>
                            <tt:IPVersion6>false</tt:IPVersion6>
                            <tt:DynDNS>false</tt:DynDNS>
                        </tt:Network>
                        <tt:System>
                            <tt:DiscoveryResolve>true</tt:DiscoveryResolve>
                            <tt:DiscoveryBye>true</tt:DiscoveryBye>
                            <tt:RemoteDiscovery>true</tt:RemoteDiscovery>
                            <tt:SystemBackup>false</tt:SystemBackup>
                            <tt:SystemLogging>false</tt:SystemLogging>
                            <tt:FirmwareUpgrade>false</tt:FirmwareUpgrade>
                            <tt:SupportedVersions>
                                <tt:Major>1</tt:Major>
                                <tt:Minor>0</tt:Minor>
                            </tt:SupportedVersions>
                        </tt:System>
                        <tt:IO>
                            <tt:InputConnectors>0</tt:InputConnectors>
                            <tt:RelayOutputs>0</tt:RelayOutputs>
                        </tt:IO>
                        <tt:Security>
                            <tt:TLS1.1>false</tt:TLS1.1>
                            <tt:TLS1.2>false</tt:TLS1.2>
                            <tt:OnboardKeyGeneration>false</tt:OnboardKeyGeneration>
                            <tt:AccessPolicyConfig>false</tt:AccessPolicyConfig>
                            <tt:X.509Token>false</tt:X.509Token>
                            <tt:SAMLToken>false</tt:SAMLToken>
                            <tt:KerberosToken>false</tt:KerberosToken>
                            <tt:RELToken>false</tt:RELToken>
                        </tt:Security>
                    </tt:Device>
                    <tt:Events>
                        <tt:XAddr>http://%s/onvif/event_service</tt:XAddr>
                        <tt:WSSubscriptionPolicySupport>false</tt:WSSubscriptionPolicySupport>
                        <tt:WSPullPointSupport>false</tt:WSPullPointSupport>
                        <tt:WSPausableSubscriptionManagerInterfaceSupport>false</tt:WSPausableSubscriptionManagerInterfaceSupport>
                    </tt:Events>
                    <tt:Media>
                        <tt:XAddr>http://%s/onvif/media_service</tt:XAddr>
                        <tt:StreamingCapabilities>
                            <tt:RTPMulticast>false</tt:RTPMulticast>
                            <tt:RTP_TCP>true</tt:RTP_TCP>
                            <tt:RTP_RTSP_TCP>true</tt:RTP_RTSP_TCP>
                        </tt:StreamingCapabilities>
                    </tt:Media>
                    <tt:PTZ>
                        <tt:XAddr>http://%s/onvif/ptz_service</tt:XAddr>
                    </tt:PTZ>
                </tds:Capabilities>
            </tds:GetCapabilitiesResponse>" $IPADDR $IPADDR $IPADDR $IPADDR
  ;;

  *GetHostname*)
    printf "<tds:GetHostnameResponse>
                <tds:HostnameInformation>
                    <tt:FromDHCP>false</tt:FromDHCP>
                    <tt:Name>%s</tt:Name>
                </tds:HostnameInformation>
            </tds:GetHostnameResponse>" $(hostname)
  ;;

  *GetNetworkProtocols*)
    printf "<GetNetworkProtocolsResponse xmlns=\"http://www.onvif.org/ver10/device/wsdl\">
                <NetworkProtocols>
                    <tt:Name>HTTP</tt:Name>
                    <tt:Enabled>true</tt:Enabled>
                    <tt:Port>80</tt:Port>
                </NetworkProtocols>
                <NetworkProtocols>
                    <tt:Name>RTSP</tt:Name>
                    <tt:Enabled>true</tt:Enabled>
                    <tt:Port>554</tt:Port>
                </NetworkProtocols>
                <NetworkProtocols>
                    <tt:Name>HTTPS</tt:Name>
                    <tt:Enabled>false</tt:Enabled>
                    <tt:Port>443</tt:Port>
                </NetworkProtocols>
            </GetNetworkProtocolsResponse>"
  ;;

  *GetNetworkDefaultGateway*)
    printf "<tds:GetNetworkDefaultGatewayResponse>
                <tds:NetworkGateway>
                    <tt:IPv4Address>%s</tt:IPv4Address>
                </tds:NetworkGateway>
            </tds:GetNetworkDefaultGatewayResponse>" $(route | awk '/default/{print substr($2,1)}')
  ;;

  *SystemReboot*)
    printf "<tds:SystemRebootResponse>
                <tt:Message>Rebooting now.</tt:Message>
            </tds:SystemRebootResponse>"
	reboot
  ;;
  
  *GetDiscoveryMode*)
    printf "<tds:GetDiscoveryModeResponse>
				<tds:DiscoveryMode>Discoverable</tds:DiscoveryMode>
			</tds:GetDiscoveryModeResponse>"
  ;;
  
  *GetUsers*)
	printf "<tds:GetUsersResponse>"
	cat /etc/passwd | while read USER; do
		case $(echo $USER | cut -d: -f3) in
			0) GROUP="Administrator" ;;
			*) GROUP="User" ;;
		esac
		printf "	<tds:User>
						<tt:Username>%s</tt:Username>
						<tt:UserLevel>%s</tt:UserLevel>
					</tds:User>" $(echo $USER | cut -d: -f1) $GROUP
	done			
	printf "</tds:GetUsersResponse>"
  ;;
  
  *)
	printf "<env:Fault>
				<env:Code>
					<env:Value>env:Receiver</env:Value>
					<env:Subcode>
						<env:Value>ter:ActionNotSupported</env:Value>
					</env:Subcode>
				</env:Code>
				<env:Reason>
					<env:Text xml:lang=\"en\">ActionNotSupported</env:Text>
				</env:Reason>
				<env:Detail>
					<env:Text>The device do NOT support this feature.</env:Text>
				</env:Detail>
			</env:Fault>"
  ;;
esac

printf "</env:Body></env:Envelope>"
